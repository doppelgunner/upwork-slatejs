{"version":3,"sources":["logo.svg","utils/SlateUtil.js","components/HtmlTextEditor.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","SlateUtil","editor","format","isActive","isBlockActive","isList","LIST_TYPES","includes","Transforms","unwrapNodes","match","n","type","split","setNodes","block","children","wrapNodes","isMarkActive","console","log","Editor","removeMark","addMark","marks","nodes","attributes","leaf","bold","code","italic","underline","element","Object","freeze","HOTKEYS","MarkButton","props","icon","reversed","useSlate","active","className","classNames","onMouseDown","event","preventDefault","toggleMark","HtmlTextEditor","elementProps","useMemo","withReact","createEditor","useState","text","value","setValue","renderElement","useCallback","Element","renderLeaf","Leaf","style","onChange","newValue","BoldOutlined","ItalicOutlined","UnderlineOutlined","onKeyDown","key","insertText","hotkey","isHotkey","mark","App","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.3c7dea91.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import { Editor, Transforms, createEditor, Node } from \"slate\";\r\nimport React from \"react\";\r\n\r\nexport default class SlateUtil {\r\n  static LIST_TYPES = Object.freeze([\"numbered-list\", \"bulleted-list\"]);\r\n\r\n  static toggleBlock(editor, format) {\r\n    const isActive = SlateUtil.isBlockActive(editor, format);\r\n    const isList = SlateUtil.LIST_TYPES.includes(format);\r\n\r\n    Transforms.unwrapNodes(editor, {\r\n      match: (n) => SlateUtil.LIST_TYPES.includes(n.type),\r\n      split: true,\r\n    });\r\n\r\n    Transforms.setNodes(editor, {\r\n      type: isActive ? \"paragraph\" : isList ? \"list-item\" : format,\r\n    });\r\n\r\n    if (!isActive && isList) {\r\n      const block = { type: format, children: [] };\r\n      Transforms.wrapNodes(editor, block);\r\n    }\r\n  }\r\n\r\n  static toggleMark(editor, format) {\r\n    const isActive = SlateUtil.isMarkActive(editor, format);\r\n\r\n    console.log(\"format\", format, isActive);\r\n\r\n    if (isActive) {\r\n      Editor.removeMark(editor, format);\r\n    } else {\r\n      Editor.addMark(editor, format, true);\r\n    }\r\n  }\r\n\r\n  static isMarkActive(editor, format) {\r\n    const marks = Editor.marks(editor);\r\n    return marks ? marks[format] === true : false;\r\n  }\r\n\r\n  static isBlockActive(editor, format) {\r\n    const [match] = Editor.nodes(editor, {\r\n      match: (n) => n.type === format,\r\n    });\r\n\r\n    return !!match;\r\n  }\r\n\r\n  static Leaf({ attributes, children, leaf }) {\r\n    if (leaf.bold) {\r\n      children = <strong>{children}</strong>;\r\n    }\r\n\r\n    if (leaf.code) {\r\n      children = <code>{children}</code>;\r\n    }\r\n\r\n    if (leaf.italic) {\r\n      children = <em>{children}</em>;\r\n    }\r\n\r\n    if (leaf.underline) {\r\n      children = <u>{children}</u>;\r\n    }\r\n\r\n    return <span {...attributes}>{children}</span>;\r\n  }\r\n\r\n  static Element({ attributes, children, element }) {\r\n    switch (element.type) {\r\n      case \"block-quote\":\r\n        return <blockquote {...attributes}>{children}</blockquote>;\r\n      case \"bulleted-list\":\r\n        return <ul {...attributes}>{children}</ul>;\r\n      case \"heading-one\":\r\n        return <h1 {...attributes}>{children}</h1>;\r\n      case \"heading-two\":\r\n        return <h2 {...attributes}>{children}</h2>;\r\n      case \"list-item\":\r\n        return <li {...attributes}>{children}</li>;\r\n      case \"numbered-list\":\r\n        return <ol {...attributes}>{children}</ol>;\r\n      default:\r\n        return <p {...attributes}>{children}</p>;\r\n    }\r\n  }\r\n}\r\n","import React, { useEffect, useMemo, useState, useCallback } from \"react\";\r\n// Import the Slate editor factory.\r\nimport { createEditor } from \"slate\";\r\n\r\n// Import the Slate components and React plugin.\r\nimport { Slate, Editable, withReact, useSlate, useSelected } from \"slate-react\";\r\nimport isHotkey from \"is-hotkey\";\r\nimport SlateUtil from \"../utils/SlateUtil.js\";\r\nimport classNames from \"classnames\";\r\nimport {\r\n  BoldOutlined,\r\n  ItalicOutlined,\r\n  UnderlineOutlined,\r\n} from \"@ant-design/icons\";\r\n\r\nconst HOTKEYS = {\r\n  \"ctrl+b\": \"bold\",\r\n  \"ctrl+i\": \"italic\",\r\n  \"ctrl+u\": \"underline\",\r\n  \"ctrl+`\": \"code\",\r\n};\r\n\r\nconst BlockButton = (props) => {\r\n  const { icon, reversed, format } = props;\r\n\r\n  const editor = useSlate();\r\n  const active = SlateUtil.isBlockActive(editor, format);\r\n\r\n  return (\r\n    <span\r\n      className={classNames(\r\n        \"icon-button\",\r\n        reversed ? (active ? \"reversed\" : null) : active ? \"active\" : null\r\n      )}\r\n      onMouseDown={(event) => {\r\n        event.preventDefault();\r\n        SlateUtil.toggleBlock(editor, format);\r\n      }}\r\n    >\r\n      {icon}\r\n    </span>\r\n  );\r\n};\r\n\r\nconst MarkButton = (props) => {\r\n  const { icon, reversed, format } = props;\r\n\r\n  const editor = useSlate();\r\n  const active = SlateUtil.isMarkActive(editor, format);\r\n\r\n  return (\r\n    <span\r\n      className={classNames(\r\n        \"icon-button\",\r\n        reversed ? (active ? \"reversed\" : null) : active ? \"active\" : null\r\n      )}\r\n      onMouseDown={(event) => {\r\n        event.preventDefault();\r\n        SlateUtil.toggleMark(editor, format);\r\n      }}\r\n    >\r\n      {icon}\r\n    </span>\r\n  );\r\n};\r\n\r\nconst HtmlTextEditor = (elementProps) => {\r\n  const editor = useMemo(() => withReact(createEditor()), []);\r\n\r\n  // Add the initial value when setting up our state.\r\n  const [value, setValue] = useState([\r\n    {\r\n      type: \"paragraph\",\r\n      children: [{ text: \"A line of text in a paragraph.\" }],\r\n    },\r\n  ]);\r\n\r\n  const renderElement = useCallback(\r\n    (props) => <SlateUtil.Element {...props} />,\r\n    []\r\n  );\r\n  const renderLeaf = useCallback((props) => <SlateUtil.Leaf {...props} />, []);\r\n\r\n  return (\r\n    <div className=\"html-editor\" style={elementProps.style}>\r\n      <Slate\r\n        editor={editor}\r\n        value={value}\r\n        onChange={(newValue) => setValue(newValue)}\r\n      >\r\n        <div className=\"html-editor__tools\">\r\n          <MarkButton icon={<BoldOutlined />} format=\"bold\" />\r\n          <MarkButton icon={<ItalicOutlined />} format=\"italic\" />\r\n          <MarkButton icon={<UnderlineOutlined />} format=\"underline\" />\r\n        </div>\r\n        <div className=\"html-editor__text-area\">\r\n          <Editable\r\n            onKeyDown={(event) => {\r\n              if (event.key === \"&\") {\r\n                // Prevent the ampersand character from being inserted.\r\n                event.preventDefault();\r\n                // Execute the `insertText` method when the event occurs.\r\n                editor.insertText(\"and\");\r\n              }\r\n            }}\r\n            onKeyDown={(event) => {\r\n              for (const hotkey in HOTKEYS) {\r\n                if (isHotkey(hotkey, event)) {\r\n                  event.preventDefault();\r\n                  const mark = HOTKEYS[hotkey];\r\n                  SlateUtil.toggleMark(editor, mark);\r\n                }\r\n              }\r\n            }}\r\n            renderElement={renderElement}\r\n            renderLeaf={renderLeaf}\r\n          />\r\n        </div>\r\n      </Slate>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default HtmlTextEditor;\r\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\n\nimport HtmlTextEditor from \"./components/HtmlTextEditor\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <pre>Simple Html text editor</pre>\n      <HtmlTextEditor />\n      <div>\n        <pre>\n          ctrl + B = Bold, ctrl + i = Italic, ctrl + u = Underline, ctrl + ` =\n          Code\n        </pre>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}